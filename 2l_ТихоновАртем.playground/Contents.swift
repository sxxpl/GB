import UIKit

//1. Написать функцию, которая определяет, четное число или нет.

func chet(a:Int)->Bool{
    return a%2==0 ? true : false
}

print(chet(a: 8))

//2. Написать функцию, которая определяет, делится ли число без остатка на 3.
func del(a:Int)->Bool{
    return a%3==0 ? true : false
}

print(del(a: 9))

//3. Создать возрастающий массив из 100 чисел. Вы сказали, что можно с рандомными

var array:[Int]=[]
for _ in 1...100{
    array.append(Int.random(in: 1...100))
}
print(array.count)

//4. Удалить из этого массива все четные числа и все числа, которые не делятся на 3.

var j:Int = 0

for _ in 0...(array.count-1) {
    if array[j]%2==0||array[j]%3 != 0 {
        array.remove(at: j)
        j-=1
    }
    j+=1
}

print(array.count)

//5. * Написать функцию, которая добавляет в массив новое число Фибоначчи, и добавить при помощи нее 50 элементов.

func newElement(array: inout[Int]){
    let arrCount=array.count
    array.append(array[arrCount-1]+array[arrCount-2])
}

var fibArray = [1,2]
for _ in 1...50 {
    newElement(array: &fibArray)
}

//6. * Заполнить массив из 100 элементов различными простыми числами. Натуральное число, большее единицы, называется простым, если оно делится только на себя и на единицу. Для нахождения всех простых чисел не больше заданного числа n, следуя методу Эратосфена, нужно выполнить следующие шаги:
//
//a. Выписать подряд все целые числа от двух до n (2, 3, 4, ..., n).
//b. Пусть переменная p изначально равна двум — первому простому числу.
//c. Зачеркнуть в списке числа от 2 + p до n, считая шагом p..
//d. Найти первое не зачёркнутое число в списке, большее, чем p, и присвоить значению переменной p это число.
//e. Повторять шаги c и d, пока возможно.

var p = 2
var simpleArray = [2]
var searchArray:[Int] = Array(2...1000)

for _ in 2...100 {
    searchArray = searchArray.filter{$0 % p != 0}
    p=searchArray.first!
    simpleArray.append(p)
}
